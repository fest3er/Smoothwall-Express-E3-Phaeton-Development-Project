#!/bin/bash
#
# SmoothWall Build system.
#
# (c) SmoothWall Ltd 2005
#
# This code is distributed under the terms of the GPL v2.

# Function try_DL
#   Minimize replicated code. A function to attempt a download

function try_DL () {
  if [ "$1" != "" ]; then
    # Try this source
    wget ${PASV}${CONTINUE_DL}${NO_CHECK_CERT}--directory $DIRECTORY $2
    return $?
  fi

  # Or indicate 'not successful'
  return 1
}


# Use passive FTP?
set | grep "PASV=" >/dev/null 2>&1
if [ "$?" -eq 0 ]; then
  PASV=""
else
  PASV="--no-passive-ftp "
fi

# Continue a croaked DL?
set | grep "CONTINUE_DL=" >/dev/null 2>&1
if [ "$?" -eq 0 ]; then
  CONTINUE_DL="-c "
else
  CONTINUE_DL=""
fi

# Check SSL certs or not?
set | grep "NO_CHECK_CERT=" >/dev/null 2>&1
if [ "$?" -eq 0 ]; then
  NO_CHECK_CERT="--no-check-certificate "
else
  NO_CHECK_CERT=""
fi

# Mirror sources
set | grep "MIRROR_UNO=" >/dev/null 2>&1 || MIRROR_UNO=""
set | grep "MIRROR_DOS=" >/dev/null 2>&1 || MIRROR_DOS="http://roadster.agcl.us/downloads"

DIRECTORY=$1
URL=$2
EXPECTED_MD5=$3

if [ "$DIRECTORY" = "" -o "$URL" = "" ]; then
  echo "Usage: $0 <directory> <url> [expected md5]"
  exit 0
fi

FILENAME=`basename $URL`

# If we don't already have the tar ball
if [ ! -e "$DIRECTORY/$FILENAME.done" ]; then

  # Try first mirror, second mirror, or URL
  try_DL "$MIRROR_UNO" "$MIRROR_UNO/$FILENAME" \
  || try_DL "$MIRROR_DOS" "$MIRROR_DOS/$FILENAME" \
  || try_DL "$URL" "$URL"

  if [ $? -ne 0 ]; then
    echo "Download failed"
    exit 1
  fi

  # Historic checksum
  if [ "$EXPECTED_MD5" != "" ]; then
    MD5=`md5sum $DIRECTORY/$FILENAME | cut -d " " -f 1`
    if [ "$MD5" != "$EXPECTED_MD5" ]; then
      echo "MD5 missmatch.  Was $MD5, meant to be $EXPECTED_MD5"
      rm -f $DIRECTORY/$FILENAME
      exit 1
    fi
  fi

  # If DL and optional checksum succeed, touch the .done file.
  touch $DIRECTORY/$FILENAME.done
fi

exit 0
