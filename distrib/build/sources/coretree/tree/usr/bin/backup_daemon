#! /bin/bash

# Phaeton/Roadster Backup
#
# Copyright 2011, Neal P. Murphy
#
# This program is licensed under the terms of the GNU Public License, version 2.

# Usage statement
usage () {
  echo "Usage: $0"
  echo "  Perform both full and var-data backups"
  echo
  exit 1
}

# Provide user feedback, to the flag file for the UI if started from the UI,
#   or to STDOUT if started manually
feedback () {
  if [ "$1" == "AUTO" ]; then
    echo -e $2 > /${BACK_FLAG}
  else
    if [ "$3" == "same" ]; then
      echo -e "\033[A$2\033[K"
    else
      echo $2
    fi
  fi
}

# Set the files to save based on the type of backup
setFiles () {
  case ${BACKUP_TYPE} in
    var)
      FILES_TO_SAVE="${EXCLUDES} ${HNAME}.tarhead"
      FILES_TO_SAVE="${FILES_TO_SAVE} ./var ./usr/etc ./etc/shadow ./etc/passwd ./etc/group"
      FILES_TO_SAVE="${FILES_TO_SAVE} ./etc/httpd/server.* ./etc/udev/rules.d/*"
      FILES_TO_SAVE="${FILES_TO_SAVE} ./root"
      FILES_TO_SAVE="${FILES_TO_SAVE} ${HNAME}.tarheel"
      ;;

    total)
      FILES_TO_SAVE="${EXCLUDES} ${HNAME}.tarhead . ${HNAME}.tarheel"
      ;;
  esac
}


####
# Begin main code
####

# How this was run determines where feedback is sent.
if [ `basename $0` == "backup_daemon" ]; then
  if [ $PPID -ne 1 ]; then
    echo "Only init (process #1) can run the daemon!"
    exit 1;
  fi
  AUTOBACK="AUTO"
else
  case $1 in
    "") ;;
    *) usage; exit 1;;
  esac
  AUTOBACK="MANUAL"
fi

# Get the smoothie pedigree
. /var/smoothwall/main/productdata
if [ -z "$RELEASE" ]; then
  tmp="`IFS="-"; set $VERSION;echo $2`"
  case $tmp in
    phaeton) RELEASE="Phaeton-Pre506";;
    roadster) RELEASE="Roadster-PreMKII";;
    "") RELEASE="SWE-3.0";;
  esac
fi

# Prepare a bunch of shorthand
REL_BACK_DIR=var/smoothwall/backup
BACK_DIR=/${REL_BACK_DIR}
BACK_FLAG="${BACK_DIR}/backup.flag"
SETTINGS="${BACK_DIR}/settings"

. ${SETTINGS}

set ${RELEASE/-/ }
RELTYPE=$1
RELVER=$2

HOST=`uname -n`
DATE=`date +"%Y-%m-%d"`
TIME=`date +"%H:%M:%S"`

KERNEL=`uname -r`

EXCLUDES="--exclude=./proc --exclude=./dev --exclude=./sys"
EXCLUDES="$EXCLUDES --exclude=./var/smoothwall/backup/tmp"
EXCLUDES="$EXCLUDES --exclude=./backup"

TO_BITBKT=">/dev/null 2>&1"

INOTIFY_CMD="inotifywait -q"
DEV_FILE="${BACK_DIR}/backup.devices"

# Go to the working dir
cd $BACK_DIR

# Normalize the flag file
touch backup.flag
chgrp nobody backup.flag
chmod 660 backup.flag

# Only check for 'the' drive plugged in if automatic
if [ $AUTOBACK == "AUTO" ]; then
  # Must be running backup_daemon (automatic)
  # Wait until the correct node appears in /dev/disk/by-id
  WATCH="CREATE"

  # Watch for CREATEs in /dev of $BACKUP_ID
  trap "" SIGHUP
  (
    trap SIGHUP
    $INOTIFY_CMD -m /dev/disk/by-id 2>&- | while read a b c; do
      if [ "$b" != "$WATCH" ]; then continue; fi
      C="${c/-part[0-9]*/}"
      if [ "$C" != "$BACKUP_ID" ]; then continue; fi
      if [ "$C" == "$c" ]; then continue; fi
      if [ -e "$a$C" -a -e "$a${C}-part1" ]; then
        echo "${C}-part1" > ${DEV_FILE}
        kill -HUP 0;
      fi
    done
  )
  trap SIGHUP
  read NODE < ${DEV_FILE}
  NODE="disk/by-id/$NODE"

  /usr/bin/sounds/inserted # Audible

else
  # Must be running backup_sys (manual)
  feedback $AUTOBACK "Plug in flash drive"

  # Wait until a new [0-9] node appears in /dev
  #   This should be OK because there should be few device changes during operation
  WATCH="CREATE"

  # Watch for CREATEs in /dev of xxx[0-9]*
  $INOTIFY_CMD -m --exclude "t[my]" /dev 2>&- | while read a b c; do
    if [ "$b" != "$WATCH" ]; then continue; fi
    C="${c/[0-9]*/}"
    if [ "$c" != "$C" -a -e "$a$C" -a -e "$a${C}1" ]; then
      echo "${C}1" > ${DEV_FILE}
      exit;
    fi
  done
  read NODE <$DEV_FILE
fi

# Make and mount
MOUNT_PT=/backup
mkdir -p $MOUNT_PT
FAIL=0
mount /dev/$NODE $MOUNT_PT >/dev/null 2>&1 || FAIL=1

if [ $FAIL -eq 1 ]; then
feedback $AUTOBACK "Couldn't mount the flash drive. Please verify that it is partitioned\nand contains a good filesystem."
  /usr/bin/sounds/mount_failed.bps
else
  /usr/bin/sounds/mount_succeeded.bps

  rm -rf ${BACK_DIR}/tmp
  mkdir ${BACK_DIR}/tmp
  # Do both var and total backups every time
  for BACKUP_TYPE in var total; do
    # Set the flag file names
    FNAME="${HOST}_${DATE}_${RELTYPE}_${RELVER}_${BACKUP_TYPE}"
    HNAME="${REL_BACK_DIR}/tmp/${FNAME}"
    touch /${HNAME}.tarhead
    touch /${HNAME}.tarheel
    # And set the files to back up
    setFiles

    # Get the file count first (for progress feedback)
    (cd /; tar cvf /dev/null ${FILES_TO_SAVE}) > /${HNAME}.list 2>/dev/null
    typeset -i i FILECOUNT
    FILECOUNT=`cat /${HNAME}.list | wc -l`
    FILECOUNT=FILECOUNT+2
    i=0
    if [ $AUTOBACK == "MANUAL" ]; then echo; fi

    # Finally, why we're here.
    (
      cd /
      tar cvfz ${MOUNT_PT}/${FNAME}.tar.gz \
          --no-recursion \
          -T ${HNAME}.list \
          2>/dev/null
    ) | while read a; do
      i=i+1
      feedback $AUTOBACK "$i/$FILECOUNT: $a" "same"
    done
  done
  rm -rf ${BACK_DIR}/tmp

  feedback $AUTOBACK "Flushing data to backup device"

  # Unmount
  (sleep .1; umount $MOUNT_PT >/dev/null 2>&1)&
  inotifywait -q -e unmount /backup >/dev/null 2>&1

  rmdir $MOUNT_PT
fi

# Tell the user to unplug the drive
/usr/bin/sounds/ring.bpf

feedback $AUTOBACK "Unplug the flash drive."

# Wait for deletion of the node mounted
WATCH="DELETE"
# Watch for the node removal
$INOTIFY_CMD -e $WATCH /dev /dev/disk/by-id 2>&- | while read a b c d; do
  if [ $c == "${NODE}" ]; then exit; fi
done

/usr/bin/sounds/removed

FPRE=`echo $FNAME | sed -e 's/total\var//'`
rm -f ${DEV_FILE} ${FPRE}{total,var}.{list,tarhead,tarheel}

echo "Last backup: $AUTOBACK; date=$DATE $TIME" > /${BACK_FLAG}

if [ "$AUTOBACK" == "MANUAL" ]; then
  echo "Backup complete."
fi
