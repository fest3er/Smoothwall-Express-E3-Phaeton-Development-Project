#! /bin/bash

>/tmp/hd.list
>/tmp/cd.list
>/tmp/nic.list

# Display aesthetics
CLS="\033[0;0f\033[2J"
BO="\033[1m"
UL="\033[4m"
BOUL="\033[1;4m"
NO="\033[0m"
SC="\0337"
RC="\0338"
CE="\033[J"

# Drive types
CDs="ide:m-cdrom|scsi:t-0x05"
HDs="ide:m-disk|scsi:t-0x00"

# Device IDs
PCI_IDS="/etc/filled.pci.ids"

# Uber title
TITLE="$CLS            ${BOUL}Smoothwall Express 3 (Roadster Test Vehicle) Installation$NO"

echo -e $TITLE; echo
#echo "Preparing lists of CDROM and hard drives and NICs"
echo "Preparing lists of CDROM and hard drives"
OPWD=$PWD
cd /sys/block

typeset -i tries cd_cnt hd_cnt WORK_IDX sum size TIME_START TIME_NOW TIME_DELTA
tries=0
WORKING[0]="|"
WORKING[1]="/"
WORKING[2]="-"
WORKING[3]="\\\\"
WORK_IDX=0
TIME_START=`date +"%s"`

# Loop until we have enough drives or concede obsequiously
#
while [ 1 -eq 1 ]; do
  # Start empty each time
  >/tmp/hd.list
  >/tmp/cd.list
  ALT_CD=0

  # Find all disks and optical drives
  for device in *; do
    if [ -e "${device}/device" ]; then
      UDEVINFO="/sbin/udevadm info --path=${PWD}/${device} --query=all"
      ID_TYPE=`$UDEVINFO | grep ID_TYPE | sed -e 's/.*=//'`
      DEVNAM=`$UDEVINFO | grep DEVNAM | sed -e 's|.*=/dev/||'`
      set `cat ${device}/size`
      if [ $1 -gt 0 ]; then
        size=$1
      else
        size=0
      fi
      model=`$UDEVINFO | grep ID_MODEL= | sed -e 's/.*=//'`
      [ -z "$model" ] && model=`cat ${device}/device/model 2>&1 | sed -e 's/ /-/g'`
      [ -z "$model" ] && model="UNK_MODEL"
      serial=`$UDEVINFO | grep ID_SERIAL_SHORT | sed -e 's/.*=//'`
      [ -z "$serial" ] && serial=`cat ${device}/device/serial 2>&1 | sed -e 's/ /-/g'`
      [ -z "$serial" ] && serial="UNK_SERIAL"
      case $ID_TYPE in
        cd)
          # if an optical drive, add it to /tmp/cd.list
          echo "$DEVNAM $size $model $serial" >> /tmp/cd.list
          ;;
        disk|generic)
          # 'generic' added per Formesyn's testing using a SanDisk Ultra II CF.
          # if a disk drive with size>0, add it to /tmp/hd.list
          if [ $size -gt 0 ]; then
            echo "$DEVNAM $size $model $serial" >> /tmp/hd.list
          fi
      esac
    fi
  done

  # Find anything?
  set `wc -l /tmp/hd.list`
  hd_cnt=$1
  set `wc -l /tmp/cd.list`
  cd_cnt=$1

  # Search for hot-plugged drives for 6 seconds
  # Short-circuit the counting if there are inexplicable delays
  TIME_NOW=`date +"%s"`
  TIME_DELTA=TIME_NOW-TIME_START
  if [ $TIME_DELTA -gt 6 ]; then tries=30; fi

  case $tries in
    5|10|15|20|25) echo -e -n " \r" ;;
    30)
      echo -e -n "\033[0J\r"
      case $hd_cnt in
        0) echo -en "\r\nNo writable drives found. ";;
        1) echo -en "\r\nOne writable drive found. ";;
        *) echo -en "\r\nTwo or more writable drives found. ";;
      esac
      case $cd_cnt in
        0) echo -n "No optical drives found. " ;;
        1) echo "One optical drive found.";;
        *) echo "Two or more optical drives found.";;
      esac
      sum=`expr $hd_cnt + $cd_cnt`
      if [ $sum -lt 2 ]; then
        echo -e "\nI do apologize. I cannot continue without at least two writable drives,"
        echo -e "or a writable drive and a CD/DVD drive.\n" 
        echo "Hard drives found:"; sed -e 's/^/  /' /tmp/hd.list
        echo "Optical drives found:"; sed -e 's/^/  /' /tmp/cd.list
        exit 1
      fi
      break
      ;;
  esac

  echo -en "${WORKING[$WORK_IDX]}\r"
  WORK_IDX=WORK_IDX+1
  [ $WORK_IDX -eq 4 ] && WORK_IDX=0

  usleep 200000
  tries=tries+1
done
cd $OPWD

echo "Finished finding drives"
if [ $hd_cnt -gt 1 ]; then
  echo -e "\nBooting/installing from flash?"
  echo -e "Be sure to correctly select the boot drive!\n"
fi
sleep 5

# Always show remaining writable drives as potential sources
ALT_CD=1

# skip NICs until setup works
if [ 1 -lt 0 ]; then
OPWD=$PWD;cd /sys/class/net
ls -C1 | while read a; do
  VNDNO=""; VND=""; DEVNO=""; DEV=""; MAC=""
  if [ -e $a/device/vendor ]; then
    VNDNO=`cat $a/device/vendor | sed -e 's/0x//'`
    VND=`egrep "^$VNDNO  " $PCI_IDS | head -1 | sed -e 's/'"$VNDNO  "'//'`
    if [ "x$VND" == "x" ]; then VND="0x$VNDNO"; fi
  fi
  if [ -e $a/device/device ]; then
    DEVNO=`cat $a/device/device | sed -e 's/0x//'`
    DEV=`egrep "$VNDNO	$DEVNO|$VNDNO		$VNDNO $DEVNO" $PCI_IDS | head -1 | sed -e 's/.*'"$DEVNO  "'//'`
    if [ "x$DEV" == "x" ]; then DEV="0x$DEVNO"; fi
  fi
  MAC=`cat $a/address | sed -e 's/://g'`
  if [ "$MAC" != "000000000000" -a "$MAC" != "" ]; then
    echo "$a|$MAC|$VND|$DEV"
  fi
done > /tmp/nic.list
cd $OPWD
fi
  

# Now get the config info

while [ 1 -eq 1 ]; do
  # Hard Drive selection
  echo -en "$TITLE"
  echo
  echo
  echo -e "${BO}Target Disk Drive Selection$NO"

  unset b
  typeset -i i b h
  i=1
  while read a b c d; do
    b=b/2/1024
    hd_dev[$i]=$a
    hd_size[$i]=$b
    hd_model[$i]=$c
    hd_id[$i]=$d
    echo -n "  $i. $a - ${hd_size[$i]}MiB (${hd_id[$i]})"
    if [ $i -eq 1 ]; then echo " (default)"; else echo; fi
    i=i+1
  done < /tmp/hd.list
  HD_CNT=$i
  echo

  echo -n "[1]        Selection: "
  read hd #</dev/tty
  if [ x$hd == "x" ]; then hd=1; fi
  if [ $hd -lt $i ]; then driveMiB="${hd_size[$hd]}"; break; fi
done

# Get the by-id name
set `head -$hd /tmp/hd.list|tail -1`
hd_sel=$1
set `ls -ls /dev/disk/by-id | egrep $hd_sel"$" | head -1`
shift 9
hd_dev=$1

while [ 1 -eq 1 ]; do
  # CD/DVD Drive selection
  echo -en "$TITLE"
  echo
  echo
  echo -e "${BO}Source Medium Selection${NO}"

  i=1
  while read a b c d; do
    cd_dev[$i]=$a
    cd_size[$i]=$b
    cd_model[$i]=$c
    cd_id[$i]=$d
    echo -n "  $i. $a - ${cd_size[$i]}MiB (${cd_model[$i]})"
    if [ $i -eq 1 ]; then echo " (default)"; else echo; fi
    i=i+1
  done < /tmp/cd.list
  OPTI_CNT=$i
  if [ $ALT_CD -eq 1 ]; then
    h=1
    while read a b c d; do
      if [ $h -ne $hd ]; then
        b=b/2/1024
        cd_dev[$i]=$a
        cd_size[$i]=$b
        cd_model[$i]=$c
        cd_id[$i]=$d
        echo -n "  $i. $a - ${cd_size[$i]}MiB ${cd_model[$i]} (${cd_id[$i]})"
        if [ $i -eq 1 ]; then echo " (default)"; else echo; fi
        i=i+1
      fi
      h=h+1
    done < /tmp/hd.list
  fi
  echo

  echo -n "[1]        Selection: "
  read CD #</dev/tty
  if [ x$CD == "x" ]; then CD=1; fi
  if [ x${cd_dev[$CD]} == x ]; then continue; fi
  if [ $CD -lt $i ]; then break; fi
done

while [ 1 -eq 1 ]; do
  # restore selection
  echo -en "$TITLE"
  echo
  echo
  echo -e "${BO}Install or restore${NO}"

  i=1; echo -e "  $i. Fresh install ${BO}ONLY${NO} (default)"
  i=2; echo -e "  $i. Restore ${BO}variable${NO} data only"
  i=3; echo -e "  $i. ${BO}Complete${NO} restoration"
  echo

  echo -n "[1]        Selection: "
  read restore #</dev/tty
  if [ x$restore == x ]; then restore="1"; fi
  if [ $restore -lt 4 ]; then break; fi
done

# Get the medium and tarball only if restoring
if [ $restore -gt 1 ]; then
  # Get the drive
  while [ 1 -eq 1 ]; do
    # Select the disk to restore from
    echo
    echo -e "${SC}${BO}Restore Medium Selection${NO}"

    unset b
    typeset -i i b h
    i=1
    while read a b c d; do
      if [ $a != ${hd_dev[$hd]} ]; then
        b=b/2/1024
        rd_dev[$i]=$a
        rd_size[$i]=$b
        rd_model[$i]=$c
        rd_id[$i]=$d
        echo -n "  $i. $a - ${rd_size[$i]}MiB (${rd_id[$i]})"
        if [ $i -eq 1 ]; then echo " (default)"; else echo; fi
        i=i+1
      fi
    done < /tmp/hd.list
    RD_CNT=$i
    echo

    echo -n "[1]        Selection: "
    read rd #</dev/tty
    if [ x$rd == "x" ]; then rd=1; fi
    if [ $rd -lt $RD_CNT ]; then break; fi
    echo -e "${RC}${CE}"
  done
  # Get the list of tarballs
  if [ "${rd_dev[$rd]}" == "$cd_dev[$CD]}" ]; then
    # Using source medium
    mount /dev/${rd_dev[$rd]}1 /cdrom
    (cd /cdrom; ls -C1 *.tar.* >/tmp/archive.list)
    umount /cdrom
  else
    # Using separate medium
    mkdir -p /restore
    mount /dev/${rd_dev[$rd]}1 /restore
    (cd /restore; ls -C1 *.tar.* >/tmp/archive.list)
    umount /restore
  fi
  while [ 1 -eq 1 ]; do
    # Select the disk to restore from
    echo
    echo -e "${SC}${BO}Archive Selection (5 latest)${NO}"

    if [ $restore -eq 2 ]; then
      backupType="var"
    else
      backupType="total"
    fi
    unset b
    typeset -i i b h
    i=1
    grep "_${backupType}.tar.gz" /tmp/archive.list | tail -5 >/tmp/temp.list
    while read a; do
        archive_id[$i]=$a
        echo "  $i. $a"
        i=i+1
    done < /tmp/temp.list
    ARCHIVE_CNT=$i
    echo

    echo -n "           Selection: "
    read archive #</dev/tty
    if [ x$archive == "x" ]; then archive=0; fi
    if [ $archive -gt 0 -a $archive -lt $ARCHIVE_CNT ]; then break; fi
    echo -e "${RC}${CE}"
  done
fi

while [ 1 -eq 1 ]; do
# Dev Pkgs
  echo -en "$TITLE"
  echo
  echo
  echo -e "${BO}Development Packages${NO}"

  i=1; echo -e "  $i. ${UL}Do not${NO} install (default)"
  i=2; echo "  $i. Install dev. pkgs."
  echo

  echo -n "[1]        Selection: "
  read dev #</dev/tty
  if [ x$dev == "x" ]; then dev=1; fi
  if [ $dev -eq 1 ]; then break; fi
  if [ $dev -eq 2 ]; then break; fi
done

while [ 1 -eq 1 ]; do
  # Disk Partitioning
  echo -en "$TITLE"
  echo
  echo
  echo -e "${BO}Disk Utilization${NO}"

  typeset -i hd_size[$hd]  driveMiB  maxMiB
  minMiB=4000
  if [ $driveMiB -le $minMiB ]; then
    echo "      The selected disk is very small (${driveMiB}MiB) and is too small to build"
    echo "      Phaeton/Roadster. Press <ENTER> to use the entire disk."
  else
    if [ $driveMiB -lt 12000 ]; then
      echo "      The selected disk is too small (${driveMiB}MiB) to build Phaeton/Roadster."
    fi
    echo "      Press <ENTER> to use the entire disk or enter a number between"
    echo "      $minMiB and $driveMiB to limit disk usage to that many MiB."
    echo "      Unused space will be available for extended partitions."
    echo
  fi

  echo -en "[whole disk]        Selection: "
  read maxMiB #</dev/tty
  if [ x$maxMiB == x ]; then maxMiB="0"; fi
  if [ $driveMiB -lt $minMib -a $maxMiB -ne 0 ]; then continue; fi
  if [ $maxMiB -eq 0 ]; then break; fi
  if [ $maxMiB -ge $minMiB -a $maxMiB -le $driveMiB ]; then break; fi
done

while [ 1 -eq 1 ]; do
  # Filesystem
  echo -en "$TITLE"
  echo
  echo
  echo -e "${BO}Filesystem${NO}"

  i=1; echo "  $i. EXT3 (default)"
  i=2; echo "  $i. ReiserFS"
  echo

  echo -n "[1]        Selection: "
  read filesys #</dev/tty
  if [ x$filesys == x ]; then filesys="1"; fi
  if [ $filesys -lt 3 ]; then break; fi
done

while [ 1 -eq 1 ]; do
  # Activate serial port for booting and/or getty
  echo -en "$TITLE"
  echo
  echo
  echo -e "${BO}Serial Port Use${NO}"

  i=1; echo "  $i. Boot"
  i=2; echo "  $i. Login"
  i=3; echo "  $i. Boot & Login"
  i=4; echo "  $i. Neither (default)"
  echo

  echo -n "[4]        Selection: "
  read serialport #</dev/tty
  if [ x$serialport == x ]; then serialport="4"; fi
  if [ $serialport -lt 5 ]; then break; fi
done

if [ $serialport -ne 4 ]; then
  while [ 1 -eq 1 ]; do
    # Choose baud rate
    echo -en "$TITLE"
    echo
    echo
    echo -e "${BO}Serial Port Baud Rate${NO}"

    i=1; echo "  $i. 115200 (default)"
    i=2; echo "  $i. 19200"
    i=3; echo "  $i. 9600"
    echo

    echo -n "[1]        Selection: "
    read serialbaud #</dev/tty
    if [ x$serialbaud == x ]; then serialbaud="1"; fi
    if [ $serialbaud -lt 4 ]; then break; fi
  done
fi

# Only use grub. LILO sucks.
#
loader=2

while [ 1 -eq 1 ]; do
  # noatime
  echo -en "$TITLE"
  echo
  echo
  echo -e "${BO}Record File Access Times${NO}"

  i=1; echo "  $i. Yes (default)"
  i=2; echo "  $i. No (enable 'noatime' for /, /boot and /var/log)"
  echo
  echo "Select (1) if installing to rotating drive."
  echo "Select (2) if installing to flash drive."
  echo

  echo -n "[1]        Selection: "
  read noatime #</dev/tty
  if [ x$noatime == x ]; then noatime="1"; fi
  if [ $noatime -lt 3 ]; then break; fi
done

# setup is limited to eth[0-3]; so skip NIC renaming for now.
#
if [ 1 -lt 0 ]; then
typeset -i nic_cnt
nic_cnt=1
OIFS="$IFS"; IFS="|"
while read a; do
  set $a
  DEV[$nic_cnt]="$1"
  MAC[$nic_cnt]="$2"
  VND[$nic_cnt]="$3"
  MDL[$nic_cnt]="$4"
  CLR[$nic_cnt]="not named"
  nic_cnt=nic_cnt+1
done < /tmp/nic.list
IFS="$OIFS"

while [ 1 -eq 1 ]; do
  # NIC names
  echo -en "$TITLE"
  echo
  echo
  echo -e "${BO}Assign Persistent NIC names${NO}"
  echo -e "  Assign names to your Network Interface Cards. It is recommended you use"
  echo -e "  standard interface colors; however, you may use (almost) any names you wish."
  echo

  i=1
  while [ $i -lt $nic_cnt ]; do
    echo -e "  $i. ${BO}${DEV[$i]}${NO} -> ${BO}${CLR[$i]}${NO}"
    echo -e "        (${MAC[$i]}|${VND[$i]}|${MDL[$i]})"
    i=i+1
  done < /tmp/nic.list
  echo "  F. Finished naming NICs"
  echo

  echo -n "           Selection: "
  read nic #</dev/tty
  if [ x$nic == x ]; then continue; fi
  if [ $nic -gt $nic_cnt ]; then continue; fi
  if [ $nic -lt 1 ]; then continue; fi
  if [ x$nic == xF ]; then break; fi
  echo -n "                Name: "
  read CLR[$nic] #</dev/tty
done
fi # skipping NIC rename

while [ 1 == 1 ]; do
  echo -e "$TITLE"
  echo
  echo

  echo "Confirm installation configuration"
  echo
  echo -e "  Installing on target ${BO}/dev/disk/by-id/${hd_id[$hd]}${NO}"
  echo -e "  Booting from source drive ${BO}/dev/${cd_dev[$CD]}${NO}"
  case $restore in
    1) echo -e "  ${BO}Fresh${NO} install"
       ;;
    2) echo -e "  Fresh install ${BO}with${NO} variable data restore"
       echo -e "        drive: ${rd_dev[$rd]}"
       echo -e "      archive: ${archive_id[$archive]}"
       ;;
    3) echo -e "  ${BO}Restore${NO} from total backup"
       echo -e "        drive: ${rd_dev[$rd]}"
       echo -e "      archive: ${archive_id[$archive]}"
       ;;
  esac
  if [ $dev -eq 1 ]; then
    echo -e "  ${BO}Skipping${NO} development packages"
  else
    echo -e "  ${BO}Installing${NO} development packages"
  fi
  if [ $maxMiB == "0" ]; then
    echo -e "  Using ${BO}whole disk${NO} (${hd_size[$hd]}MiB)"
  else
    echo -e "  Using first ${BO}${maxMiB}MiB${NO} of hard drive"
  fi
  if [ $filesys == "1" ]; then
    echo -e "  Making ${BO}EXT3${NO} filesystems"
  else
    echo -e "  Making ${BO}ReiserFS${NO} filesystems"
  fi
  case $serialbaud in
    1) BAUD=115200;;
    2) BAUD=19200;;
    3) BAUD=9600;;
  esac
  case $serialport in
    1) echo -e "  Using serial port for ${BO}boot console only @$BAUD 8N1${NO}";;
    2) echo -e "  Using serial port for ${BO}normal login only @$BAUD 8N1${NO}";;
    3) echo -e "  Using serial port for both ${BO}boot & login @$BAUD 8N1${NO}";;
    4) echo -e "  ${BO}Not using${NO} serial port"
  esac
  echo -e "  Installing ${BO}GRUB${NO} boot loader"
  if [ $noatime == "1" ]; then
    echo -e "  Recording file access time"
  else
    echo -e "  ${BO}NOT${NO} recording file access times"
  fi
  echo

  # Skip NIC renaming for now
  #
  if [ 1 -lt 0 ]; then
  typeset -i ypos
  ypos=6
  echo -e "\033[${ypos};40f  Assigning persistent NIC names:"
  ypos=ypos+1
  i=1;
  while [ $i -lt $nic_cnt ]; do
    if [ "${CLR[$i]}" != "not named" ]; then
      echo -e "\033[${ypos};40f    ${DEV[$i]} -> ${BO}${CLR[$i]}${NO}"
      ypos=ypos+1
    fi
    i=i+1
  done
  fi # skip NIC renaming

  echo -en "\033[20;0fIf this is OK, type yes."
  echo -en "\033[21;0fTo restart, type no."
  echo -en "\033[23;0fOK? "
  read a #</dev/tty
  if [ x$a == "xyes" ]; then
    export hd CD dev maxMiB filesys loader noatime restore archive_id archive
    break;
  elif [ x$a == "xno" ]; then
    echo "Restarting installation configuration..."
    sleep 1
    exit
  else
    echo -en "\007 ??"
    sleep 2
  fi
done
